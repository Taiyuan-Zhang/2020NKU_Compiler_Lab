
;; Function add (add, funcdef_no=0, decl_uid=2249, cgraph_uid=0, symbol_order=0)


Analyzing function body size: add

Inline summary for add/0
  self time:       3
  global time:     0
  self size:       4
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:2.000000, time:3.000000, predicate:(true)
    size:2.000000, time:0.000000, predicate:(not inlined)
  calls:

add (int a, int b)
{
  int D.2260;
  int _3;

  <bb 2> [0.00%]:
  _3 = a_1(D) + b_2(D);

<L0> [0.00%]:
  return _3;

}



;; Function sub (sub, funcdef_no=1, decl_uid=2253, cgraph_uid=1, symbol_order=1)


Analyzing function body size: sub

Inline summary for sub/1
  self time:       3
  global time:     0
  self size:       4
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:2.000000, time:3.000000, predicate:(true)
    size:2.000000, time:0.000000, predicate:(not inlined)
  calls:

sub (int a, int b)
{
  int D.2262;
  int _3;

  <bb 2> [0.00%]:
  _3 = a_1(D) - b_2(D);

<L0> [0.00%]:
  return _3;

}



;; Function main (main, funcdef_no=2, decl_uid=2255, cgraph_uid=2, symbol_order=2)


Analyzing function body size: main

Inline summary for main/2
  self time:       46
  global time:     0
  self size:       20
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:5.000000, time:6.000000, predicate:(true)
    size:2.000000, time:0.000000, predicate:(not inlined)
  calls:
    printf/4 function body not available
      loop depth: 0 freq:1000 size: 5 time: 14 callee size: 0 stack: 0
    add/0 function not considered for inlining
      loop depth: 0 freq:1000 size: 4 time: 13 callee size: 2 stack: 0
    scanf/3 function body not available
      loop depth: 0 freq:1000 size: 4 time: 13 callee size: 0 stack: 0

main ()
{
  int b;
  int a;
  int D.2264;
  int b.0_1;
  int a.1_2;
  int _3;
  int b.2_4;
  int a.3_5;
  int _12;

  <bb 2> [0.00%]:
  scanf ("%d %d", &a, &b);
  b.0_1 = b;
  a.1_2 = a;
  _3 = add (a.1_2, b.0_1);
  b.2_4 = b;
  a.3_5 = a;
  printf ("a=%d, b=%d, a+b=%d\n", a.3_5, b.2_4, _3);
  a ={v} {CLOBBER};
  b ={v} {CLOBBER};
  _12 = 0;

<L0> [0.00%]:
  return _12;

}


